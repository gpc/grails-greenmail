buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath 'io.github.gradle-nexus:publish-plugin:1.0.0'
    }
}

apply plugin: 'org.grails.grails-plugin'
apply plugin: 'org.grails.grails-gsp'
apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'io.github.gradle-nexus.publish-plugin'

group 'io.github.gpc'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {
    console "org.grails:grails-console"
    compileOnly 'org.grails:grails-core'
    compileOnly 'org.grails:grails-dependencies'
    compileOnly "org.grails:grails-logging"
    compileOnly "org.grails:grails-plugin-services"
    compileOnly "org.grails:grails-plugin-url-mappings"
    compileOnly "org.grails.plugins:gsp"
    profile "org.grails.profiles:web-plugin"
    testImplementation "io.micronaut:micronaut-inject-groovy"
    testImplementation "org.grails:grails-web-testing-support"

    implementation "com.icegreen:greenmail:2.0.0"
    implementation 'jakarta.mail:jakarta.mail-api:2.0.1'
    api "com.icegreen:greenmail:2.0.0"
}

bootRun {
    ignoreExitValue true
    jvmArgs(
            '-Dspring.output.ansi.enabled=always',
            '-noverify',
            '-XX:TieredStopAtLevel=1',
            '-Xmx1024m')
    sourceResources sourceSets.main
    String springProfilesActive = 'spring.profiles.active'
    systemProperty springProfilesActive, System.getProperty(springProfilesActive)
}

tasks.withType(Test).configureEach {
    useJUnitPlatform()
}
bootJar.enabled = false

tasks.register('sourceJar', Jar) {
    from { ["LICENSE.txt"] }
    from sourceSets.main.allSource
    archiveClassifier = "sources"
}

artifacts {
    archives jar, sourceJar
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId project.name
            version project.version
            groupId project.group
            from components.java
            artifact sourceJar
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name 'GreenMail Plugin'
                    description 'Grails GreenMail Plugin'
                    url 'https://github.com/gpc/greenmail'
                    scm {
                        url 'https://github.com/gpc/greenmail'
                        connection 'scm:git@github.com:gpc/greenmail.git'
                        developerConnection 'scm:git@github.com:gpc/greenmail.git'
                    }
                    issueManagement {
                        system 'Github Issues'
                        url 'https://github.com/gpc/greenmail/issues'
                    }
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution 'repo'
                        }
                    }
                    developers {
                        developer {
                            id 'gpc'
                            name 'Grails Plugin Collective'
                        }
                    }
                }
            }
        }
    }
}

ext."signing.keyId" = project.findProperty('signing.keyId') ?: System.getenv('SIGNING_KEY_ID')
ext."signing.password" = project.findProperty('signing.password') ?: System.getenv('SIGNING_PASSPHRASE')
ext."signing.secretKeyRingFile" = project.findProperty('signing.secretKeyRingFile') ?: (System.getenv('SIGNING_PASSPHRASE') ?: "${System.getProperty('user.home')}/.gnupg/secring.gpg")

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

afterEvaluate {
    signing {
        required { isReleaseVersion }
        sign publishing.publications.maven
    }
}

tasks.withType(Sign).configureEach {
    onlyIf { isReleaseVersion }
}

nexusPublishing {
    repositories {
        sonatype {
            def ossUser = System.getenv('SONATYPE_USERNAME') ?: project.findProperty('sonatypeOss2Username') ?: ''
            def ossPass = System.getenv('SONATYPE_PASSWORD') ?: project.findProperty("sonatypeOss2Password") ?: ''
            def ossStagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID') ?: project.findProperty('sonatypeOssStagingProfileIdJms') ?: ''

            nexusUrl = uri('https://s01.oss.sonatype.org/service/local/')
            snapshotRepositoryUrl = uri('https://s01.oss.sonatype.org/content/repositories/snapshots/')
            username = ossUser
            password = ossPass
            stagingProfileId = ossStagingProfileId
        }
    }
}

tasks.register('snapshotVersion') {
    doLast {
        if (!project.version.endsWith('-SNAPSHOT')) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}
